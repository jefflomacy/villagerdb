#!/usr/bin/env node

require('dotenv').config();

const fs = require('fs');
const path = require('path');
const moment = require('moment');
const es = require('../db/elasticsearch');

const staticify = require('../config/staticify');
const searchConfig = require('../config/search.js');
const formatHelper = require('../helpers/format');
const urlHelper = require('../helpers/url');
const sitemap = require('../helpers/sitemap');

function usage() {
    console.error('Usage: bin/util <command>');
    process.exit(1);
}

async function generateSitemap() {
    sitemap.generateMap();
}

async function deleteSearchIndex() {
    // Delete the elasticsearch index
    return es.indices.delete({
        index: searchConfig.elasticSearchIndexName
    })
}

async function buildSearchIndex() {
    // Create the index.
    await es.indices.create({
        index: searchConfig.elasticSearchIndexName
    });

    // Define the index mappings properly.
    await es.indices.putMapping({
        index: searchConfig.elasticSearchIndexName,
        body: {
            properties: {
                suggest: {
                    type: 'completion'
                },
                type: {
                    type: 'keyword'
                },
                keyword: {
                    type: 'keyword'
                },
                gender: {
                    type: 'keyword'
                },
                species: {
                    type: 'keyword'
                },
                personality: {
                    type: 'keyword'
                },
                game: {
                    type: 'keyword'
                },
                zodiac: {
                    type: 'keyword'
                },
                category: {
                    type: 'keyword'
                },
                interiorTheme: {
                    type: 'keyword',
                },
                fashionTheme: {
                    type: 'keyword'
                },
                orderable: {
                    type: 'boolean'
                },
                set: {
                    type: 'keyword'
                },
                name: {
                    type: 'text'
                }
            }
        }
    });

    await indexVillagers(es);
    await indexItems(es);
}

/**
 * Add villagers to the entity index.
 *
 * @param es
 * @returns {Promise<void>}
 */
async function indexVillagers(es) {
    const files = fs.readdirSync(path.join('data', 'villagers'));
    for (let file of files) {
        const data = fs.readFileSync(path.join('data', 'villagers', file), 'utf8');
        const parsed = JSON.parse(data);

        // Build document.
        const document = {
            type: searchConfig.villagerEntityType,
            suggest: {
                input: parsed.name
            },
            keyword: parsed.name.toLowerCase(),
            gender: parsed.gender,
            species: parsed.species,
            name: parsed.name,
            url: urlHelper.getEntityUrl(searchConfig.villagerEntityType, parsed.id),
            imageUrl: staticify.getVersionedPath(urlHelper.getImageUrl(searchConfig.villagerEntityType,
                urlHelper.THUMB, parsed.id))
        };

        // Get unique personalities.
        document.game = [];
        document.personality = [];
        for (let game in parsed.games) {
            document.game.push(game);

            const personality = parsed.games[game].personality;
            if (personality && !document.personality.includes(personality)) {
                document.personality.push(personality);
            }
        }

        // Zodiac?
        if (parsed.birthday) {
            document.zodiac = formatHelper.getZodiac(moment(parsed.birthday + '-2000', 'MM-DD-YYYY')).toLowerCase();
        }

        // Create the villager document.
        await es.index({
            index: searchConfig.elasticSearchIndexName,
            id: searchConfig.villagerEntityType + '-' + parsed.id,
            body: document
        });
        console.log('Indexed ' + parsed.id);
    }
}

/**
 * Add items to the entity index.
 *
 * @param es
 * @returns {Promise<void>}
 */
async function indexItems(es) {
    const files = fs.readdirSync(path.join('data', 'items'));
    for (let file of files) {
        const data = fs.readFileSync(path.join('data', 'items', file), 'utf8');
        const parsed = JSON.parse(data);

        // Build document.
        const document = {
            type: searchConfig.itemEntityType,
            suggest: {
                input: parsed.name
            },
            keyword: parsed.name.toLowerCase(),
            name: parsed.name,
            category: parsed.category,
            game: [],
            url: urlHelper.getEntityUrl(searchConfig.itemEntityType, parsed.id),
            imageUrl: staticify.getVersionedPath(urlHelper.getImageUrl(searchConfig.itemEntityType, urlHelper.THUMB,
                parsed.id))
        };

        for (let game in parsed.games) {
            document.game.push(game);
            document.orderable = parsed.games[game].orderable ? true : false;
            document.interiorTheme = parsed.games[game].interiorThemes;
            document.fashionTheme = parsed.games[game].fashionThemes;
            document.set = parsed.games[game].set;
        }

        // Create the item document.
        await es.index({
            index: searchConfig.elasticSearchIndexName,
            id: searchConfig.itemEntityType + '-' + parsed.id,
            body: document
        });
        console.log('Indexed ' + parsed.id);
    }
}

/**
 * Build the villager and item databases. This will clear them before building them.
 *
 */
async function buildRedisDb() {
    const villagers = require('../db/entity/villagers');
    const items = require('../db/entity/items');

    await villagers.populateRedis()
    console.log('Villager database populated.');
    await items.populateRedis();
    console.log('Items database populated.');
}

if (process.argv.length !== 3) {
    usage();
}

const command = process.argv[2];
if (!command) {
    usage();
} else if (command === 'generate-sitemap') {
    generateSitemap()
        .then(() => {
            console.log('Generated new sitemap.');
        })
        .catch((e) => {
            console.log('Failed to generate new sitemap.');
            console.error(e);
        });
} else if (command === 'delete-search-index') {
    deleteSearchIndex()
        .catch((e) => {
        }) // doesn't matter that it failed to delete
        .then(() => {
            console.log('Deleted ' + searchConfig.elasticSearchIndexName + ' index.');
        });
} else if (command === 'build-search-index') {
    buildSearchIndex()
        .then(() => {
            console.log('Built ' + searchConfig.elasticSearchIndexName + ' index successfully.');
        })
        .catch((e) => {
            console.log('Failed to build search index.');
            console.error(e);
        });
} else if (command === 'build-redis-db') {
    const redisConnection = require('../db/redis');
    buildRedisDb()
        .then(() => {
            // So the process will actually terminate.
            redisConnection.quit();
        })
        .catch((e) => {
            console.log('Error building redis db.');
            console.error(e);
        })
} else {
    console.error('Valid commands: generate-sitemap, delete-search-index, build-search-index, build-redis-db.');
    process.exit(1);
}